<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Filecoin Spec</title>
    <link>https://filecoin-project.github.io/specs/docs/</link>
    <description>Recent content in Docs on Filecoin Spec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://filecoin-project.github.io/specs/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/actors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/actors/</guid>
      <description>Filecoin State Machine Actors Any implementations of the Filecoin actors must be exactly byte for byte compatible with the go-filecoin actor implementations. The pseudocode below tries to capture the important logic, but capturing all the detail would require embedding exactly the code from go-filecoin, so for now, its simply informative pseudocode. The algorithms below are correct, and all implementations much match it (including go-filecoin), but details omitted from here should be looked for in the go-filecoin code.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/address/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/address/</guid>
      <description>Address A Filecoin address is an identifier that refers to an actor in the Filecoin state. All actors (miner actors, the storage market actor, account actors) have an address. This address encodes information about the network to which an actor belongs, the specific type of address encoding, the address payload itself, and a checksum. The goal of this format is to provide a robust address format that is both easy to use and resistant to errors.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/data-propagation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/data-propagation/</guid>
      <description>Filecoin Data Propagation The filecoin network needs to broadcast blocks and messages to all peers in the network. This document details how that process works.
Messages and block headers along side the message references are propagated using the gossipsub libp2p pubsub router. Every full node must implement and run that protocol. All pubsub messages are authenticated and must be syntactically validated before being propagated further.
Further more, every full node must implement and offer the bitswap protocol and provide all Cid Referenced objects, it knows of, through it.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/data-structures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/data-structures/</guid>
      <description>Data Structures In this document, we give an introduction to each of the protocol data structures and then explain how to encode these data structures for use in other parts of Filecoin (e.g. network protocols and the blockchain).
Address An address is an identifier that refers to an actor in the Filecoin state. All actors (miner actors, the storage market actor, account actors) have an address. An address encodes information about: - Network this address belongs to - Type of data the address contains - The data itself - Checksum (depending on the type of address)</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/definitions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/definitions/</guid>
      <description>Definitions / Glossary Updates to definitions To make any updates to these definitions please submit a pull request with the changes, or open an issue and one of the maintainers will do it for you.
Notes  Want to split all repair stuff to separate doc Let&amp;rsquo;s refer to Filecoin system rather than network. In a sense, the network is an instantiation of the system (this protocol). We can however refer to the Filecoin VM separately which means the system by which we apply changes to the state of the system at a point in time.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/expected-consensus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/expected-consensus/</guid>
      <description>Expected Consensus This spec describes how the expected consensus (EC) protocol works in general. To read more about Filecoin-specific processes, see:
 Mining Blocks on how consensus is used in block mining. Faults on slashing. Storage market on how the power table is created and maintained. Block data structure for details on fields and encoding.  Important concepts and definitions Some important concepts relevant to expected consensus are: - Verifiable Delay Function (VDF) - Verifiable Random Function (VRF) - TipSet - Ticket - Ticket Chain - Height &amp;ndash; In the realm of EC, it is worth noting that a new ticket must be produced at every height, consequently the duration of a round is bounded by the duration of the Verifiable Delay Function run to generate a ticket.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/faults/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/faults/</guid>
      <description>Faults A fault is what happens when partcipants in the protocol are behaving incorrectly and that behavior needs to be punished. There are a number of possible faults in the Filecoin protocol, their details are all recorded below.
Fault List Consensus Faults  Duplicate Block Submission Slashing:  Condition: If any miner posts two blocks satisfying the slashing conditions defined in Expected Consensus. Reporting: Anyone may call SlashConsensusFault and pass in the two offending block headers.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/local-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/local-storage/</guid>
      <description> Filecoin Node Local Storage A Filecoin node stores certain data locally. This section details what exactly gets stored (though exactly how things are stored is not dictated).
Chain Data Private Keys Sectors Storage Deals </description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/mining/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/mining/</guid>
      <description>What is the Filecoin Mining Process An active participant in the filecoin consensus process is a storage miner and expected consensus block proposer. They are responsible for storing data for the filecoin network and also for driving the filecoin consensus process. Miners should constantly be performing Proofs of SpaceTime, and also checking if they have a winning ticket to propose a block at each height/in each round. Rounds are currently set to take around 30 seconds, in order to account for network propagation around the world.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/network-protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/network-protocols/</guid>
      <description>Filecoin Specific Network Protocols All filecoin network protocols are implemented as libp2p protocols. This document will assume that all data is communicated between peers on a libp2p stream as outlined in networking
Ipld dag-cbor RPC Filecoin uses many pre-existing protocols from ipfs and libp2p, and also implements several new protocols of its own. For these Filecoin specific protocols, we will use the Ipld dag-cbor RPC protocol format, defined below.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/networking/</guid>
      <description>Filecoin Network The Filecoin network is built using libp2p building blocks, as transports and protocols, as well as some additional Filecoin specific protocols as outlined in Network Protocols.
Required Protocols Every full node must support the following libp2p protocols:
 gossipsub (for data announcements) bitswap Filecoin specific Protocols:  Hello Handshake StorageDeal BlockSync   Transports, Streams &amp;amp; Encryption Connections between nodes are end-to-end-encrypted and -authenticated, thus every node has a peerId associated with it.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/payments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/payments/</guid>
      <description>Payments What are payments What payments affect Dependencies Miners Claiming Earnings Storage Miners claim their Storage Market earnings via payment channels.
The client proposes the cadence of the earnings for a deal by creating SignedVoucher-s. Each vouchers specify how often Storage Miners can claim earnings and how much each earning should be, more precisely, each voucher has some tokens assigned and can be redeemed only at a particular block height.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/process/</guid>
      <description>Filecoin Spec Process (v0) &amp;lsquo;Catch Up&amp;rsquo; Mode Until we get to &amp;lsquo;spec parity&amp;rsquo; where our current level of understanding of the protocol and the spec are in sync, changes will be made to the spec by a simple PR process. If something is missing, PR it in, if something is wrong, PR a fix, if something needs to be elaborated, PR in updates. What is in the top level of this repo, in master, is the spec.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/proof-of-spacetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/proof-of-spacetime/</guid>
      <description>Proof-of-Spacetime This document describes Rational-PoSt, the Proof-of-Spacetime used in Filecoin.
Rational PoSt Definitions    Name Value Description     POST_PROVING_PERIOD 2880 blocks (~24h) The time interval in which a PoSt has to be submitted.   POST_CHALLENGE_TIME 240 blocks (~2h) The time offset at which the actual work of generating the PoSt can not be started earlier than. This is some delta before the end of the Proving Period, and as such less then a single Proving Period.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/proofs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/proofs/</guid>
      <description>Proofs Overview The Filecoin protocol uses cryptographic proofs to ensure the two following guarantees:
 Storage Based Consensus: Miners&amp;rsquo; power in the consensus is proportional to their amount of storage. Miner increase their power by proving that they are dedicating unique storage to the network. Verifiable Storage Market: Miners must be proving that they are dedicating unique physical space for each copy of the clients data through a period of time.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/retrieval-market/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/retrieval-market/</guid>
      <description>Retrieval Market V0 What is the Retrieval Market What the Retrieval Market affects Dependencies Components Version 0 of the retrieval market protocol is what we (tentatively) will launch the filecoin network with. It is version zero because it will only be good enough to fit the bill as a way to pay another node for a file.
The main components are as follows:
 A payment channel actor (See payment channels for details) &amp;lsquo;retrieval-v0&amp;rsquo; libp2p services A chain-based content routing interface A set of commands to interact with the above  Retrieval V0 libp2p Services The v0 retrieval market will initially be implemented as two libp2p services.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/signatures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/signatures/</guid>
      <description>Signatures What are signatures in Filecoin Signatures are cryptographic functions that attest to the origin of a particular message. In the context of Filecoin, signatures are used to send and receive messages among with the assurance that each message was generated by specific individuals. In other words, it is infeasible for another individual i to generate a signed message that appears to have been generated by j.
We use signatures in filecoin to verify something was done by someone.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/state-machine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/state-machine/</guid>
      <description>The Filecoin State Machine The majority of Filecoin&amp;rsquo;s user facing functionality (payments, storage market, power table, etc) is managed through the Filecoin State Machine. The network generates a series of blocks, and agrees which &amp;lsquo;chain&amp;rsquo; of blocks is the correct one. Each block contains a series of state transitions called messages, and a checkpoint of the current global state after the application of those messages.
The global state here consists of a set of actors, each with their own private state.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/storage-market/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/storage-market/</guid>
      <description>The Filecoin Storage Market What is the Filecoin Storage Market The Filecoin storage market is the underlying system used to discover, negotiate and form storage contracts between clients and storage providers called storage miners in a Filecoin network. The storage market itself is an actor that helps to mediate certain operations in the market, including adding new miners, and punishing faulty ones, it does not directly mediate any actual storage deals.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/style/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/style/</guid>
      <description>Style Wording Any content that is written with code ticks has a specific definition to Filecoin and is defined in the glossary.
The key words &amp;ldquo;MUST&amp;rdquo;, &amp;ldquo;MUST NOT&amp;rdquo;, &amp;ldquo;REQUIRED&amp;rdquo;, &amp;ldquo;SHALL&amp;rdquo;, &amp;ldquo;SHALL NOT&amp;rdquo;, &amp;ldquo;SHOULD&amp;rdquo;, &amp;ldquo;SHOULD NOT&amp;rdquo;, &amp;ldquo;RECOMMENDED&amp;rdquo;, &amp;ldquo;MAY&amp;rdquo;, and &amp;ldquo;OPTIONAL&amp;rdquo; in this document are to be interpreted as described in RFC 2119.
Code Blocks Many sections of the spec use go type notation to describe the functionality of certain components. This is entirely a style preference by the authors and does not imply in any way that one must use go to implement Filecoin.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/validation/</guid>
      <description>Block Validation In order to ensure they are always on the correct latest state of the chain a filecoin full node must accept and process blocks continuously. Blocks are propagated was described in the Data Propagation document.
Validation is split into two stages, syntactic and semantic. The syntactic stage may be validated without reference to additional data (see block). The semantic stage requires access to the chain which the block extends.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/zigzag-circuit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/zigzag-circuit/</guid>
      <description>ZigZag: Offline PoRep Circuit Spec ZigZag is the Proof of Replication used in Filecoin. The prover encodes the original data into a replica and commits to it. An offline PoRep proves that the commitment to the replica is a valid commitment of the encoded original data.
ZigZag has been presented by Ben Fisch at EUROCRYPT19.
ZigZag Overview ZigZag PoRep is based on layering DRG graphs LAYERS times. The data represented in each DRG layer is the data encoded in the previous layer.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://filecoin-project.github.io/specs/docs/zigzag-porep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/zigzag-porep/</guid>
      <description>Proof-of-Replication This spec describes the specific Proof-of-Replication used in Filecoin called ZigZag.
ZigZag has been presented by Ben Fisch at EUROCRYPT19.
Introduction Background on Proof-of-Replication Proof-of-Replication enables a prover P to convince a verifier V that P is storing a replica R, a physically independent copy of some data D, unique to P. The scheme is defined by a tuple of polynomial time algorithms (Setup, Replication, Prove, Verify). The assumption is that generation of a replica after Replicate must be difficult (if not impossible) to generate.</description>
    </item>
    
    <item>
      <title>ZigZag Commitments</title>
      <link>https://filecoin-project.github.io/specs/docs/zigzag-commitments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://filecoin-project.github.io/specs/docs/zigzag-commitments/</guid>
      <description>Introduction This document provides a simplified visual explanation of the ZigZag Commitment algorithm described in Tight PoS - ZigZag.
It is intended to confer intuition about the algorithm, and to serve as a reference for implementers. The author of this document and those of the linked paper believe the two are consistent; and converging on this consistent design was a third design goal of this document&amp;rsquo;s construction.
Graph Both renumbered (DRG) and reversed (expander) parents are generated by a pseudorandom permutation and are provided only to illustrate the nature of the zigzag commitment scheme.</description>
    </item>
    
  </channel>
</rss>